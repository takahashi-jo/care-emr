name: CareEMR CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # 1. Code Quality & Linting
  lint:
    name: 'Code Quality'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

  # 2. Security Scanning
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript
            p/typescript
            p/react

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '1'

  # 3. Build Test
  build:
    name: 'Build Test'
    runs-on: ubuntu-latest
    needs: [lint]

    strategy:
      matrix:
        environment: [development, production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          VITE_APP_NAME: CareEMR
          VITE_APP_VERSION: "1.0.0"
          VITE_APP_ENV: ${{ matrix.environment }}
          VITE_DEBUG_ENABLED: ${{ matrix.environment == 'development' && 'true' || 'false' }}
          VITE_GOOGLE_FONTS_URL: "https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Noto+Sans+JP:wght@300;400;500;600;700&display=swap"

      - name: Upload build artifacts
        if: matrix.environment == 'production'
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 1

      - name: Check build output
        run: |
          echo "✅ Build completed for ${{ matrix.environment }}"
          ls -la dist/

  # 4. Performance Check
  performance:
    name: 'Performance Check'
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/

      - name: Bundle size analysis
        run: |
          echo "📊 Bundle Size Analysis"
          echo "======================"

          # Check main bundle size
          main_js=$(find dist/assets -name "index-*.js" | head -1)
          if [ -f "$main_js" ]; then
            size=$(stat -c%s "$main_js" 2>/dev/null)
            kb_size=$((size / 1024))
            echo "Main bundle: ${kb_size}KB"

            # Warn if over 300KB
            if [ $size -gt 307200 ]; then
              echo "⚠️  Main bundle size (${kb_size}KB) is large"
            else
              echo "✅ Main bundle size is acceptable"
            fi
          fi

          # Show all asset sizes
          echo ""
          echo "📁 All Assets:"
          find dist/assets -type f | while read file; do
            size=$(stat -c%s "$file" 2>/dev/null)
            kb_size=$((size / 1024))
            echo "$(basename "$file"): ${kb_size}KB"
          done | sort -k2 -n

  # 5. CI Summary
  ci-summary:
    name: 'CI Summary'
    runs-on: ubuntu-latest
    needs: [lint, security, build, performance]
    if: always()

    steps:
      - name: CI Results
        run: |
          echo "🎯 CareEMR CI Results"
          echo "===================="
          echo "✅ Code Quality: ${{ needs.lint.result }}"
          echo "🔒 Security Scan: ${{ needs.security.result }}"
          echo "🏗️  Build Test: ${{ needs.build.result }}"
          echo "📊 Performance: ${{ needs.performance.result }}"

          # Fail if critical jobs failed
          if [[ "${{ needs.lint.result }}" == "failure" ||
                "${{ needs.security.result }}" == "failure" ||
                "${{ needs.build.result }}" == "failure" ]]; then
            echo ""
            echo "❌ CI Pipeline Failed"
            exit 1
          else
            echo ""
            echo "✅ CI Pipeline Passed"
          fi